
name: Deploy to Amazon ECS 

on:
  push:
    branches: [ "feature" ] #
permissions:
  id-token: write
  contents: read
jobs:
  terraform:
    name: 'Terraform'
    runs-on: [ubuntu-latest]
   
    defaults:
      run:
        working-directory: ./
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::766261352911:role/GitActions
          aws-region: us-west-2
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        if: github.ref == 'refs/heads/feature' && github.event_name == 'push'
        run: terraform apply -auto-approve
        
  build-and-deploy:
    defaults:
      run:
        working-directory: ./    
    runs-on: [ubuntu-latest]
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::766261352911:role/GitActions
          aws-region: us-west-2      
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: app2
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT    

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: app-task-definition.json 
          container-name: app
          image: ${{ steps.build-image.outputs.image }}    
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: arn:aws:ecs:us-west-2:766261352911:service/MY_ECS_CLUSTER/SERVICE_APP_FINAL
          cluster: arn:aws:ecs:us-west-2:766261352911:cluster/MY_ECS_CLUSTER
          wait-for-service-stability: true    
